/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Computer
        Description: This the computer that you need to fix or the power goes off.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#include "..\headers\define.h"

#define NAME                    SCRIPT_OSCOMPTR
#define CUR_COMP_SCRIPT         SCRIPT_OSCOMPTR

#include "..\headers\command.h"
#include "..\headers\vault13.h"

#include "..\headers\v13.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;

#define TIMER_DOING_SEQUENCE 1
#define TIMER_DO_SKILL 2

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/
 #define LVAR_Herebefore                (0)
 #define LVAR_Did_Seq                   (1)

variable begin
   doSequence := 0;
   sequenceCount := 0;

   lastDudeTile := 0;
   lastDudeRot := 0;

   body;
   g1;
   g2;
   g3;
   g4;
   g5;
   gruth;
end

/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/

procedure sequence;

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/
procedure timed_event_p_proc begin
   if (fixed_param == TIMER_DOING_SEQUENCE) then begin
      call sequence;
   end else if (fixed_param == TIMER_DO_SKILL) then begin
      call use_skill_on_p_proc;
   end
end

procedure start begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
   if (not combat_is_initialized) then
      call use_skill_on_p_proc;
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end


/**********************************************************************************
**********************************************************************************/

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end


/**********************************************************************************
   Make sure the door is working.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   if (not combat_is_initialized) then begin
      script_overrides;

      if (map_var(MVAR_Computer_Status) == COMP_FIXED) then begin
         if (local_var(LVAR_Did_Seq) or not VAULT13_SEQ) then begin
            call Node007;
         end else begin
            debug_msg("OSCOMPTR: called node 8 through skill proc");
            start_gdialog(NAME,self_obj,4,-1,-1);
            gSay_Start;
               call Node008;
            gSay_End;
            end_dialogue;
         end
      end else if (map_var(MVAR_Computer_Status) == COMP_DUMB_PART or map_var(MVAR_Computer_Status) == COMP_PART) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node006;
         gSay_End;
         end_dialogue;
      end else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
      end
      set_local_var(LVAR_Herebefore, 1);
   end

   if (doSequence == 1) then begin
      doSequence := 0;
      call sequence;
   end
end


/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/

procedure use_obj_on_p_proc begin
   script_overrides;
   add_timer_event(self_obj, 2, TIMER_DO_SKILL);
end


/******************************************************************************************
   IF it gets damaged it breaks
******************************************************************************************/

procedure damage_p_proc begin
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

procedure Node999 begin
end

procedure Node001 begin
   Reply(103);
   NOption(104, Node002, 1);
   NOption(105, Node003, 1);
   if (has_skill(dude_obj, SKILL_SCIENCE) > 25) then
      NOption(106, Node004, 1);
   if (has_skill(dude_obj, SKILL_SCIENCE) > 50) then
      NOption(107, Node005, 1);
   NOption(108, Node999, 1);
end

procedure Node002 begin
   Reply(109);
   NOption(110, Node003, 1);
   if (has_skill(dude_obj, SKILL_SCIENCE) > 25) then
      NOption(111, Node004, 1);
   if (has_skill(dude_obj, SKILL_SCIENCE) > 50) then
      NOption(112, Node005, 1);
   NOption(113, Node999, 1);
end

procedure Node003 begin
   Reply(114);
   if (has_skill(dude_obj, SKILL_SCIENCE) > 25) then
      NOption(115, Node004, 1);
   NOption(116, Node005, 1);
   NOption(117, Node999, 1);
end

procedure Node004 begin
   Reply(118);
   NOption(119, Node005, 1);
   NOption(120, Node999, 1);
end

procedure Node005 begin
   set_v13_status(FLG_SABOTAGE);
   SETDSTATUS(GDPART);
   Reply(121);
   if (dude_iq < 4) then begin
      set_map_var(MVAR_Computer_Status, COMP_DUMB_PART);
      ENDOPTION;
   end else begin
      set_map_var(MVAR_Computer_Status, COMP_PART);
      ENDOPTION;
   end
end
//122
//123

procedure Node006 begin
   if (obj_carrying_pid_obj(dude_obj, VOICE_CHIP_PID)) then begin
      destroy_object(obj_carrying_pid_obj(dude_obj, VOICE_CHIP_PID));
      set_map_var(MVAR_Computer_Status, COMP_FIXED);
      SETDSTATUS(GDFIXED);
      Reply(124);
      ENDOPTION;
   end else begin
      Reply(125);
      ENDOPTION;
   end
end

procedure Node007 begin
   display_msg(mstr(127));
end

procedure NodeDoSeq begin
   doSequence := 1;
   call Node999;
end

procedure Node008 begin
   Reply(128);
   MOREOPTION(NodeDoSeq);
end

#define BOS_TILE      21913
#define BOS_ROT       2

#define GUARD_TILE_1  22309
#define GUARD_ROT_1   2

#define GUARD_TILE_2  22707
#define GUARD_ROT_2   3

#define GUARD_TILE_3  22718
#define GUARD_ROT_3   1

#define GUARD_TILE_4  22116
#define GUARD_ROT_4   2

#define GUARD_TILE_5  21313
#define GUARD_ROT_5   2

#define GRUTHAR_TILE  22713
#define GRUTHAR_ROT   5

#define TILE 22313

procedure loadPid(variable pid, variable tile, variable rot, variable ele) begin
   variable retObj;

   retObj := create_object(pid, tile, ele);
   if (retObj) then begin
      reg_anim_clear(retObj);
      reg_anim_begin();
      anim(retObj, ANIMATE_ROTATION, rot);
      reg_anim_end();
   end

   return retObj;
end
/*
#define HIDEMEMBER(x)    \
   if (x) then begin     \
      hid_##x := 1;      \
      set_obj_visibility(x, OBJ_INVIS); \
   end

#define UNHIDE(x)        \
   if (x) then begin     \
      if (hid_##x) then begin \
         hid_##x := 0;        \
         set_obj_visibility(x, OBJ_VIS);\
      end                               \
   end

variable begin
   hid_Vic_Ptr;
   hid_Myron_Ptr;
   hid_Marcus_Ptr;
   hid_MacRae_Ptr;
   hid_Sulik_Ptr;
   hid_Lenny_Ptr;
   hid_Cyberdog_Ptr;
   hid_Doc_Ptr;
   hid_Goris_Ptr;
   hid_Davin_Ptr;
   hid_Miria_Ptr;
   hid_Robobrain_Ptr;
   hid_Dogmeat_Ptr;
   hid_Pariah_Dog_Ptr;
   hid_K9_Ptr;
   hid_Robobrain_Human_Ptr;
   hid_Robobrain_Abnormal_Ptr;
   hid_Robobrain_Chimp_Ptr;
end

procedure hideParty begin
   HIDEMEMBER(Vic_Ptr)
   HIDEMEMBER(Myron_Ptr)
   HIDEMEMBER(Marcus_Ptr)
   HIDEMEMBER(MacRae_Ptr)
   HIDEMEMBER(Sulik_Ptr)
   HIDEMEMBER(Lenny_Ptr)
   HIDEMEMBER(Cyberdog_Ptr)
   HIDEMEMBER(Doc_Ptr)
   HIDEMEMBER(Goris_Ptr)
   HIDEMEMBER(Davin_Ptr)
   HIDEMEMBER(Miria_Ptr)
   HIDEMEMBER(Robobrain_Ptr)
   HIDEMEMBER(Dogmeat_Ptr)
   HIDEMEMBER(Pariah_Dog_Ptr)
   HIDEMEMBER(K9_Ptr)
   HIDEMEMBER(Robobrain_Human_Ptr)
   HIDEMEMBER(Robobrain_Abnormal_Ptr)
   HIDEMEMBER(Robobrain_Chimp_Ptr)
end

procedure unhideParty begin
   UNHIDE(Vic_Ptr)
   UNHIDE(Myron_Ptr)
   UNHIDE(Marcus_Ptr)
   UNHIDE(MacRae_Ptr)
   UNHIDE(Sulik_Ptr)
   UNHIDE(Lenny_Ptr)
   UNHIDE(Cyberdog_Ptr)
   UNHIDE(Doc_Ptr)
   UNHIDE(Goris_Ptr)
   UNHIDE(Davin_Ptr)
   UNHIDE(Miria_Ptr)
   UNHIDE(Robobrain_Ptr)
   UNHIDE(Dogmeat_Ptr)
   UNHIDE(Pariah_Dog_Ptr)
   UNHIDE(K9_Ptr)
   UNHIDE(Robobrain_Human_Ptr)
   UNHIDE(Robobrain_Abnormal_Ptr)
   UNHIDE(Robobrain_Chimp_Ptr)
end
  */


procedure sequence begin
   variable sound;


   if (sequenceCount == 0) then begin
      game_ui_disable;
      party_no_follow_on;
      fadeout(500);

//      party_member_hide_all

      set_obj_visibility(dude_obj, OBJ_INVIS);
      lastdudetile := dude_tile;
      lastduderot := obj_get_rot(dude_obj);

      body := loadPid(PID_END_BOSS, BOS_TILE, BOS_ROT, elevation(self_obj));
      g1 := loadPid(PID_MALE_ENCALVE_PATROL, GUARD_TILE_1, GUARD_ROT_1, elevation(self_obj));
      g2 := loadPid(PID_MALE_ENCALVE_PATROL, GUARD_TILE_2, GUARD_ROT_2, elevation(self_obj));
      g3 := loadPid(PID_MALE_ENCALVE_PATROL, GUARD_TILE_3, GUARD_ROT_3, elevation(self_obj));
      g4 := loadPid(PID_MALE_ENCALVE_PATROL, GUARD_TILE_4, GUARD_ROT_4, elevation(self_obj));
      g5 := loadPid(PID_MALE_ENCALVE_PATROL, GUARD_TILE_5, GUARD_ROT_5, elevation(self_obj));
      gruth := loadPid(PID_LARGE_DEATHCLAW, GRUTHAR_TILE, GRUTHAR_ROT, elevation(self_obj));

      move_to(dude_obj, GRUTHAR_TILE, elevation(self_obj));

      fadein(500);
      float_msg(body, mstr(129), FLOAT_MSG_NORMAL);
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(5), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 1) then begin
      float_msg(gruth, mstr(130), FLOAT_MSG_RED);
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(5), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 2) then begin
      float_msg(body, mstr(131), FLOAT_MSG_NORMAL);
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(5), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 3) then begin
      float_msg(gruth, mstr(132), FLOAT_MSG_RED);
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(5), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 4) then begin
      float_msg(body, mstr(133), FLOAT_MSG_RED);
      animate_move_obj_to_tile(body, TILE, ANIMATE_WALK);
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(2), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 5) then begin
      if (not anim_busy(body)) then begin
         sound := sfx_build_char_name(body, ANIM_throw_punch, snd_contact);
         reg_anim_clear(body);
         reg_anim_begin();
         reg_anim_animate(body, ANIM_throw_punch, -1);
         reg_anim_play_sfx(body, sound, 0);
         reg_anim_end();
         sequenceCount += 1;
      end
      add_timer_event(self_obj, 5, TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 6) then begin
      sound := sfx_build_char_name(gruth, ANIM_chunks_of_flesh, snd_die);
      reg_anim_clear(gruth);
      reg_anim_begin();
      reg_anim_animate(gruth, ANIM_chunks_of_flesh, -1);
      reg_anim_play_sfx(gruth, sound, 0);
      reg_anim_end();
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(4), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 7) then begin
      float_msg(body, mstr(134), FLOAT_MSG_NORMAL);
      sequenceCount += 1;
      add_timer_event(self_obj, game_ticks(3), TIMER_DOING_SEQUENCE);
   end else if (sequenceCount == 8) then begin
      fadeout(1000);
      destroy_object(body);
      destroy_object(g1);
      destroy_object(g2);
      destroy_object(g3);
      destroy_object(g4);
      destroy_object(g5);
      destroy_object(gruth);

      move_to(dude_obj, lastdudetile, elevation(self_obj));
      anim(dude_obj, ANIMATE_ROTATION, lastduderot);
      set_obj_visibility(dude_obj, OBJ_VIS);

//      party_member_unhide_all

      fadein(500);
      game_ui_enable;
      if (Goris_In_Party) then begin
         float_msg(Goris_Ptr, mstr(135), FLOAT_MSG_RED);
      end
      set_local_var(LVAR_Did_Seq, 1);
      party_no_follow_off;
      ON_VAULT13_SEQ_DONE;
   end
end