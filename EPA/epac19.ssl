/*
  ***   Script conwerted to Interplay format by Fallout Script Edytor (by Jargo)  ***
*/

#include "D:\BlackIsle\Fallout 2 Mapper\scripts\HEADERS\define.h"
//#include "D:\BlackIsle\Fallout 2 Mapper\scripts\HEADERS\<TownMapName.h>"

#define NAME                    SCRIPT_EPAC19          //Script name from scripts.h
#define TOWN_REP_VAR            GVAR_TOWN_REP_           //Global variable name for this Town

#include "D:\BlackIsle\Fallout 2 Mapper\scripts\HEADERS\command.h"
#include "D:\BlackIsle\Fallout 2 Mapper\scripts\HEADERS\ModReact.h"
#include "D:\BlackIsle\Fallout 2 Mapper\scripts\HEADERS\partybkg.h"

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)

procedure start;
procedure combat_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

variable starttile := 0;

import variable critter_obj;
import variable DOCTOR_obj;

procedure use_obj_on_p_proc;

procedure start begin
  critter_obj := self_obj;
end

procedure map_update_p_proc begin
  critter_obj := self_obj;
end

procedure combat_p_proc
begin
  if (has_trait(TRAIT_OBJECT, self_obj, OBJECT_VISIBILITY)) then
  begin
    if (obj_can_see_obj(self_obj, DOCTOR_obj)) then
      attack(DOCTOR_obj, 0, 1, 0, 0, 30000, 0, 0);
    else if (tile_distance_objs(self_obj, DOCTOR_obj) > 12) then
    begin
      if (tile_distance_objs(self_obj, dude_obj) > (12 * 2)) then
        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(DOCTOR_obj), (has_trait(TRAIT_OBJECT, DOCTOR_obj, OBJECT_CUR_ROT) + 3) % 6, 9), 1);
      else
        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(DOCTOR_obj), (has_trait(TRAIT_OBJECT, DOCTOR_obj, OBJECT_CUR_ROT) + 3) % 6, 9), 0);
    end
  end
end

procedure timed_event_p_proc
begin
  if (fixed_param == 1) then
  begin
    if (has_trait(TRAIT_OBJECT, self_obj, OBJECT_VISIBILITY)) then
    begin
      if (obj_can_see_obj(self_obj, DOCTOR_obj)) then
        attack(DOCTOR_obj, 0, 1, 0, 0, 30000, 0, 0);
      else if (tile_distance_objs(self_obj, DOCTOR_obj) > 12) then
      begin
        if (tile_distance_objs(self_obj, DOCTOR_obj) > (12 * 2)) then
          animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(DOCTOR_obj), (has_trait(TRAIT_OBJECT, DOCTOR_obj, OBJECT_CUR_ROT) + 3) % 6, 9), 1);
        else
          animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(DOCTOR_obj), (has_trait(TRAIT_OBJECT, DOCTOR_obj, OBJECT_CUR_ROT) + 3) % 6, 9), 0);
      end
    end
  end
end

procedure critter_p_proc
begin
  if (global_var(GVAR_LOWER_EPAFIELDS) == 1) then
  begin
    animate_move_obj_to_tile(self_obj, 18507, 0);
    add_timer_event(self_obj, game_ticks(10), 1);
  end
end

procedure destroy_p_proc
begin
end

procedure look_at_p_proc
begin
end

procedure description_p_proc
begin
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc begin
  critter_obj := self_obj;
  starttile := tile_num(self_obj);
  reg_anim_clear( self_obj);
  reg_anim_begin();
  anim(self_obj, 1000, random(0, 5));
  reg_anim_end();
end

procedure use_obj_on_p_proc begin
end