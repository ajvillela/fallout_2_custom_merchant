/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: RAIDERS
        Description:

        Log:

           Created: May 6, 1998

           Updated:
*/

/* Include Files */
#include "..\headers\define.h"
#define NAME                    SCRIPT_ICSCOUT
#define TOWN_REP_VAR            GVAR_TOWN_REP_RAIDERS
#include "..\headers\command.h"
#include "..\headers\Raiders.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;
procedure combat_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */

#define LVAR_Flags                    (0)

variable wabbits;

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

/* Local variables which do not need to be saved between map changes. */


procedure start begin
end

procedure timed_event_p_proc begin
//   if (combat_is_initialized == false) then begin
//   end
//   raider_add_timer_event_rand(self_obj, 20, 35, float_param);
end

procedure map_enter_p_proc begin
   wabbits := random(30, 50);
   if (is_loading_game == false) then begin
      if (map_first_run) then begin
         inc_raiders_counter;
         critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_RAIDERS);
         critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_SHADOW_WHO_WALKS);
      end
//      raider_add_timer_event_rand(self_obj, 20, 35, float_param);
      check_kill_raider;
   end
end
procedure map_update_p_proc begin
   check_set_raider_party_flags;
end

procedure combat_p_proc begin
   check_set_raider_party_flags;
end

procedure critter_p_proc begin
   // Scout doesn't attack the player unless comabt starts with Raiders.
   check_set_raider_party_flags;
/*
   if (self_can_see_dude) then begin
      if (hostile) then begin
         self_attack_dude;
      end else begin
         check_set_raider_party_flags;
      end
   end
*/
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   set_herebefore;
   call Node001;
end

procedure destroy_p_proc begin
   dec_raiders_counter;
end

procedure look_at_p_proc begin
   script_overrides;
   // display_mstr(100); ***
end

procedure description_p_proc begin
   script_overrides;
   display_mstr_rand(150, 150 + examined);
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   if (hostile == false) then begin
      set_hostile;
   end
end
procedure Node999 begin
end

procedure Node001 begin
   wabbits -= 1;
   if (wabbits <= 0) then begin
      wabbits := random(30, 50);
      float_msg(dude_obj, mstr(300), FLOAT_COLOR_WHISPER);
   end
   else begin
      display_mstr_rand(200, 201);
   end
end