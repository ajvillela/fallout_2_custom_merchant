/*
	Script for critter tmplete
*/




/* Include Files */
#include "..\headers\define.h"
#include "..\headers\DEN.h"
#include "..\headers\DENRES1.h"

#define NAME                    SCRIPT_DCDEALER

#include "..\headers\command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure destroy_p_proc;

procedure Node999;
procedure Node998;
procedure Node001;
procedure NodeBarter;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Flags                      (4)
#define LVAR_Herebefore                 (5)
#define LVAR_Hostile                    (6)
#define LVAR_Personal_Enemy             (7)
#define LVAR_Restock_Time               (8)
#define LVAR_Restock_Time_Fix           (9)

variable dealer :=0;
/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));

end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if ( (hostile) or (map_var(MVAR_Dealer_Attacked) == 1) ) then begin
         set_map_var(MVAR_Dealer_Attacked,2);
         self_attack_dude;
      end
   end
end
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure destroy_p_proc begin
   inc_evil_critter
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      set_map_var(MVAR_Dealer_Attacked,1);
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
         //added by killap
   variable tmp;
   variable special_item;
   //end added 
   
   CHECK_LEVEL

   if (self_tile == 14462) then
      dealer := 1;

   if (dealer and is_loading_game == false) then begin

      //added by killap - fix for game_time going negative after 7 years
      if (((game_time) < 0) and (local_var(LVAR_Restock_Time_Fix) == 0)) then begin
         set_local_var(LVAR_Restock_Time, game_time - 1);
         set_local_var(LVAR_Restock_Time_Fix, 1);
      end
      //end added

      if (local_var(LVAR_Restock_Time) < game_time) then begin
         
      //new added
      tmp := create_object(PID_FOOTLOCKER_CLEAN_LEFT,5,0);
      if (obj_is_carrying_obj_pid(self_obj, PID_NAV_COMPUTER_PARTS ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_NAV_COMPUTER_PARTS);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_NAVCOM_PARTS ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_NAVCOM_PARTS);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_COMPUTER_VOICE_MODULE ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_COMPUTER_VOICE_MODULE);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_V15_COMPUTER_PART ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_V15_COMPUTER_PART);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_GECK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_GECK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_VERTIBIRD_PLANS ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_VERTIBIRD_PLANS);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_TANKER_FOB ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_TANKER_FOB);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);   
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_CAR_FUEL_CELL ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_CAR_FUEL_CELL);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);   
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_CAR_FUEL_CELL_CONTROLLER ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_CAR_FUEL_CELL_CONTROLLER);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);   
      end 
      if (obj_is_carrying_obj_pid(self_obj, PID_CAR_FUEL_INJECTION ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_CAR_FUEL_INJECTION);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_VIC_RADIO ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_VIC_RADIO);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_VIC_WATER_FLASK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_VIC_WATER_FLASK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_HY_MAG_PART ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_HY_MAG_PART);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_DAY_PASS ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_DAY_PASS);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_FAKE_CITIZENSHIP ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_FAKE_CITIZENSHIP);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_CORNELIUS_GOLD_WATCH ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_CORNELIUS_GOLD_WATCH);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_RED_PASS_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_RED_PASS_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_BLUE_PASS_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_BLUE_PASS_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_GOLD_LOCKET ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_GOLD_LOCKET);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_YELLOW_PASS_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_YELLOW_PASS_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_ANNA_GOLD_LOCKET ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_ANNA_GOLD_LOCKET);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_TRAPPER_TOWN_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_TRAPPER_TOWN_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_GECKO_DATA_DISK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_GECKO_DATA_DISK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_REACTOR_DATA_DISK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_REACTOR_DATA_DISK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_YELLOW_REACTOR_KEYCARD ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_YELLOW_REACTOR_KEYCARD);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_RED_REACTOR_KEYCARD ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_RED_REACTOR_KEYCARD);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_PLASMA_TRANSFORMER ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_PLASMA_TRANSFORMER);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_MOORE_BAD_BRIEFCASE ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_MOORE_BAD_BRIEFCASE);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_MOORE_GOOD_BRIEFCASE ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_MOORE_GOOD_BRIEFCASE);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_LYNETTE_HOLO ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_LYNETTE_HOLO);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_WESTIN_HOLO ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_WESTIN_HOLO);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_SPY_HOLO ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_SPY_HOLO);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_DR_HENRY_PAPERS ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_DR_HENRY_PAPERS);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end      
      if (obj_is_carrying_obj_pid(self_obj, PID_PRESIDENTIAL_PASS ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_PRESIDENTIAL_PASS);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_VAULT_13_SHACK_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_VAULT_13_SHACK_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_EXCAVATOR_CHIP ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_EXCAVATOR_CHIP);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_RAMIREZ_BOX_CLOSED ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_RAMIREZ_BOX_CLOSED);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_RAMIREZ_BOX_CLOSED ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_RAMIREZ_BOX_CLOSED);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_RAMIREZ_BOX_OPEN ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_RAMIREZ_BOX_OPEN);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_RAMIREZ_BOX_CLOSED ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_RAMIREZ_BOX_CLOSED);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_BISHOPS_HOLODISK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_BISHOPS_HOLODISK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_ACCOUNT_BOOK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_ACCOUNT_BOOK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_ECON_HOLODISK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_ECON_HOLODISK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_CELL_DOOR_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_CELL_DOOR_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_SMITTY_MEAL ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_SMITTY_MEAL);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_BECKY_BOOK ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_BECKY_BOOK);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_ENLIGHTENED_ONE_LETTER ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_ENLIGHTENED_ONE_LETTER);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_K9_MOTIVATOR ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_K9_MOTIVATOR);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      if (obj_is_carrying_obj_pid(self_obj, PID_PRES_ACCESS_KEY ) > 0) then begin
         special_item := obj_carrying_pid_obj(self_obj, PID_PRES_ACCESS_KEY);
         rm_obj_from_inven(self_obj,special_item);
         add_obj_to_inven(tmp, special_item);  
      end
      //end new added
         
         
         
         destroy_obj_inven(self_obj); //added by killap - one of the preventives I am adding towards the "too many items bug"
         check_restock_item(PID_JET, 2, 5, 100)
         check_restock_item(PID_BUFFOUT, 0, 1, 100)
         check_restock_item(PID_STIMPAK, 2, 3, 100)
         check_restock_item(PID_BEER, 2, 3, 100)
         check_restock_item(PID_NUKA_COLA, 1, 2, 100)
         check_restock_item(PID_BOTTLE_CAPS, 15, 30, 100)
         set_local_var(LVAR_Restock_Time, (random(1, 2) * ONE_GAME_DAY) + game_time);
         
         //new added - killap
         move_obj_inven_to_obj(tmp, self_obj);
         destroy_object(tmp);
         //end new added
         
         
      end
   end

   if (dealer == 1) then begin
      tmp := create_object(PID_DESERT_EAGLE,5,0);
      wield_obj(tmp);
   end

   critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, TEAM_DEN_RES_DEALER);
   critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_THUG);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (dealer) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end else
      floater(202);
   
end

procedure Node998 begin
   set_hostile;
end

procedure Node999 begin

end

procedure Node001 begin
   Reply(102);
   NOption(103,NodeBarter,004);
   NOption(104,Node999,004);
end

procedure NodeBarter begin
   gdialog_barter;
   Reply(105);
   NOption(106,Node999,004);
end