Hook scripts are specially named scripts that are run by sfall at specific points to allow mods to override normally hardcoded behaviour in a more flexible way than sfall's normal ini configuration.

In addition to the bit of code it overrides, the script will be run once when first loaded and again at each player reload to allow for setup. Hook scripts have access to a set of arguments supplied to sfall, but aren't required to use them all. They also return one or more values, but again they're optional, and you only need to return a value if you want to override the default.

hook scipts have the same limitation as global scripts in that the start procedure _must_ be the first defined procedure in the file. This means that you must put 'procedure start;' above any #includes that pull in procedure definitions, including define.h.

As good practise to aid in mod compatibility, only use the hs_xxx .int script if you are setting return values. For any other scripts, use a normal global script combined with register_hook.

There are four script functions specific to hook scripts:

int init_hook()
The hook script equivilent of game_loaded; it returns 2 when the script is first loaded, 1 when the player reloads and 0 otherwise.

mixed get_sfall_arg()
Gets the next argument from sfall. Each time it's called it returns the next argument, or otherwise it returns 0 if there are no more arguments left.

void set_sfall_return(int value)
Used to return the new values from the script. Each time it's called it sets the next value, or if you've already set all return values it does nothing.

void register_hook(int hooktype)
Used from a normal global script if you want to run it at the same point a full hook script would normally run. You can use get_sfall_arg like normal, and while you can also use set_sfall_return the results will be overridden if the normal hook script exists. The defines to use for the hooktype are in sfall.h.

-------------------------------------------

hs_tohit.int

Runs when fallout is calculating the chances of an attack striking a target
Runs after the hit chance is fully calculated normally, including applying the 95% cap

int     arg1 - The unmodified hit chance
critter arg2 - The target of the attack
critter arg3 - The attacker
int     arg4 - The targeted bodypart

int     ret1 - the new hit chance

-------------------------------------------

hs_afterhitroll.int

Runs after fallout has decided if an attack will hit or miss

int     arg1 - If the attack will hit. (0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit)
critter arg2 - The attacker
critter arg3 - The target of the attack
int     arg4 - The bodypart
int     arg5 - The hit chance

int     ret1 - Override the hit/miss
int     ret2 - Override the targeted bodypart
critter ret3 - Override the target of the attack

-------------------------------------------

hs_calcapcost.int

Runs whenever fallout is calculating the ap cost of an action
Note that the first time a game is loaded, this script doesn't run before the initial interface is drawn, so if the script effects the ap cost of whatever is in the players hands at the time the wrong ap cost will be shown. It will be fixed the next time the interface is redrawn.

critter arg1 - The critter performing the action
int     arg2 - No idea
int     arg3 - Still no idea
int     arg4 - The normal ap cost

int     ret1 - The new ap cost

-------------------------------------------

hs_deathanim1.int

Runs before fallout tries to calculate the death animation. Lets you switch out which weapon fallout sees

int     arg1 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
critter arg2 - The attacker
critter arg3 - The target
int     arg4 - The amount of damage

int     ret1 - The pid of an object to override the attacking weapon with

-------------------------------------------

hs_deathanim2.int

Runs after fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than hs_deathanim1, but performs no validation.

item    arg1 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
critter arg2 - The attacker
critter arg3 - The target
int     arg4 - The amount of damage
int     arg5 - The death anim id calculated by fallout

int     ret1 - The death anim id to override with

-------------------------------------------

hs_combatdamage.int

Runs whenever the target takes damage in combat. Does not run for misses, or on extra targets when bursting.

critter arg1 - The target
critter arg2 - The attacker
int     arg3 - The amount of damage to the target
int     arg4 - The amount of damage to the attacker
int     arg5 - The special effect flags for the target
int     arg6 - The special effect flags for the attacker
int     arg7 - The weapon used in the attack
int     arg8 - The bodypart that was struck

int     ret1 - The damage to the target
int     ret1 - The damage to the attacker
int     ret1 - The special effect flags for the target
int     ret1 - The special effect flags for the attacker

-------------------------------------------

hs_ondeath.int

Runs immediately after a critter dies for any reason. No return values; this is just a convinence for when you need to do something after death for a large number of different critters and don't want to have to script each and every one of them.

Critter arg1 - The critter that just died

-------------------------------------------

hs_findtarget.int

Runs when the ai is trying to pick a target in combat. Fallout first chooses a list of 4 likely suspects, then normally sorts them in order of weakness/distance/etc depending on the ai caps of the attacker. This hook replaces that sorting function, allowing you to sort the targets in some arbitrary way. Use sfall_return to give the 4 targets, in order of preference. All 4 must be given if you want to override normal sorting; if you want to specify less than 4 targets fill in the extra spaces with 0's. If you do not give 4 targets, the npcs normal sorting mechanism will be used.

The return values can include critters that weren't in the list of possible targets, but the additional targets may still be discarded later on in the combat turn if they are out of the attackers perception or the chance of a successful hit is too low. The list of possible targets often includes duplicated entries.

critter arg1 - The attacker
critter arg2 - A possible target
critter arg3 - A possible target
critter arg4 - A possible target
critter arg5 - A possible target

critter ret1 - The first choice of target
critter ret2 - The second choice of target
critter ret3 - The third choice of target
critter ret4 - The fourth choice of target

-------------------------------------------

hs_useobjon.int

Runs when a critter uses an object on another critter. (Or themselves)

This is fired before the object is used, and the relevent use_obj_on script procedures are run.

Critter arg1 - The user
Critter arg2 - The target
int     arg3 - The object used

-------------------------------------------

hs_removeinvenobj.int

Runs when an object is removed from a critters inventory for any reason

critter arg1 - the critter the object is being removed from
item    arg2 - the item that is being removed
int     arg3 - a flag, or possibly the number of items to remove
int     arg4 - The reason the object is being removed. (Actually, the site from which _item_remove_mult was called)

-------------------------------------------

hs_barterprice.int

Runs whenever the value of goods being purchased is calculated

critter arg1 - the critter doing the bartering (either dude_obj or inven_dude)
critter arg2 - the critter being bartered with
int     arg3 - the default value of the goods
critter arg4 - the barter critter (has all of the goods being traded in its inventory)
int     arg5 - the amount of actual caps in the barter stack (as opposed to goods)
int     arg6 - the value of all goods being traded before skill modifications

int     ret1 - the modified value of all of the goods

-------------------------------------------

hs_movecost.int

Runs when calculating the ap cost of movement

Critter arg1 - the critter doing the moving
int     arg2 - the number of hexes being moved
int     arg3 - the original ap cost

int     ret1 - the new ap cost

-------------------------------------------

hs_hexmoveblocking.int
hs_hexshootblocking.int
hs_hexaiblocking.int

Runs when checking to see if a hex blocks movement or shooting. (or ai-ing, presumably...)

Critter arg1 - the critter doing the moving
int     arg2 - the tile number being checked
int     arg3 - the elevation being checked
int     arg4 - 1 if the hex would normally be blocking

object* ret1 - 0 if the hex doesn't block, or any sort of object pointer if it does

-------------------------------------------

hs_itemdamage.int

Runs when retriving the damage rating of the players used weapon. (Which may be their fists.)

int     arg1 - The default min damage
int     arg2 - The default max damage
Item    arg3 - The weapin used. (0 if unarmed)
Critter arg4 - The critter doing the attacking
int     arg5 - The type of attack
int     arg6 - non zero if this is an attack using a melee weapon

int     ret1 - Either the damage to be used, if ret2 isn't given, or the new minimum damage if it is
int     ret2 - The new maximum damage