/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Lenny
        Location: Gecko
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: January 14, 1998

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#include "..\headers\define.h"
#include "..\headers\gecko.h"
#include "..\headers\NEWR1.h" //added by killap

#define NAME                    SCRIPT_GCLENNY
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GECKO)
#define floater(x)		float_msg(self_obj, message_str(NAME,x),FLOAT_MSG_RED)
#define UNKNOWN     0
#define HOUSE       1
#define SHOP        2
#define LENNY_BAD_KARMA         -100
#define PARTY_NODE_X            Node1000

#include "..\headers\command.h"
#include "..\headers\ModReact.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure push_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure checkarea;
procedure HealPlayer;
procedure PayDude;
procedure PartyFree;
procedure HowMany;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node901;
procedure Node910;
procedure Node920;
procedure Node922;
procedure Node924;
procedure Node926;
procedure Node929;
procedure Node930;
procedure Node931;
procedure Node932;
procedure Node933;
procedure Node934;
procedure Node935;
procedure Node936;
procedure Node937;
procedure Node938;
procedure Node939;
procedure Node940;
procedure Node951;
procedure Node953;
procedure Node954;
procedure Node960;
procedure Node961;
procedure Node962;
procedure Node963;
procedure Node964;
procedure Node965;
procedure Node966;
procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

#define lenny_joins_party                 party_add(self_obj);                                                   \
                                          add_timer_event(self_obj,game_ticks(1),1);                             \
                                          critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_PLAYER)
#define dude_has_free_slot_for_lenny        ((dude_at_max_party_size == false) and (Lenny_In_Party == false))
#define lenny_party_member_options                                                                \
         party_member_default_options

// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node1a;
procedure Node001;
procedure Node002;
procedure Node02a;
procedure Node003;
procedure Node004;
procedure Node04a;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node10a;
procedure Node010;
procedure Node11a;
procedure Node011;
procedure Node12a;
procedure Node012;
procedure Node13a;
procedure Node013;
procedure Node14a;
procedure Node014;
procedure Node015;
procedure Node16a;
procedure Node016;
procedure Node17a;
procedure Node017;
procedure Node18a;
procedure Node018;
procedure Node19a;
procedure Node019;
procedure Node20a;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
//procedure Node030;
//procedure Node031;
//procedure Node032;
//procedure Node033;
//procedure Node034;
//procedure Node035;
//procedure Node036;
//procedure Node037;
//procedure Node038;
//procedure Node039;
//procedure Node040;
//procedure Node041;
//procedure Node042;
//procedure Node043;
//procedure Node044;
//procedure Node045;
procedure Node070;
procedure Node071;
procedure Node072;
procedure Node073;
procedure Node074;
procedure Node075;
procedure Node076;

//RP content - killap
procedure Node077;
procedure Node078;
procedure Node079;
procedure Node080;
procedure Node081;
procedure Node082;
procedure Node083;
procedure Node084;
procedure Node085;
procedure Node086;
procedure Node087;
//end added

procedure Node800;
procedure Node1000;
procedure Node1001;
procedure Node1002;
procedure Node1003;
procedure Node1004;
procedure Node1005;
procedure Node1006;
procedure Node1007;
procedure Node1008;
procedure Node1009;
procedure Node1010;
procedure Node1100;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Give                       (7)
#define LVAR_18_before                  (8)
#define LVAR_20_before                  (9)
#define LVAR_WAITING                    (10)
#define LVAR_FOLLOW_DISTANCE            (11)
#define LVAR_TEAM                       (12)
#define LVAR_lenny_rep                  (13)
#define LVAR_never_again                (14)
#define LVAR_second_look                (15)
#define LVAR_GECKO_DESCENDANT_KNOWN     (16) //added by killap
#define LVAR_Time_To_Glow               (17) //added by killap - expansion
#define LVAR_Know_Doctor                (18) //added by killap - expansion
#define LVAR_Heart_Health_Talk          (19) //added by killap - expansion

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable area;
variable here;
variable k;
variable ss;
variable visit_04_before:=0;
variable visit_14_before:=0;
variable from6:=0;
variable Heal_Cost;
variable prev_node; //added by killap
variable waiting := 0; //added by killap

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   party_member_map_enter;
   if (Lenny_In_Party) then begin
      //do nothing
   end
   else begin
      Only_Once:=0;
      critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_GECKO);
      //NEVER SET AI FOR NPC's
      //critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_PARTY_LENNY_DEFENSIVE);
   end
   
   //added by killap
   add_timer_event(self_obj, random(25, 40), 900);
end

procedure map_update_p_proc begin
   if (combat_is_initialized == false) then begin
      if (anim_busy(self_obj) == false) then begin
         if (party_member_obj(obj_pid(self_obj)) != 0) then begin
            if (chem_use_level(self_obj) == 1) then begin
               if ((100 * self_cur_hits / self_max_hits) <= 60) then begin
                  global_temp := 1;
                  obj_heal_no_skill(self_obj)
               end
            end else if (chem_use_level(self_obj) == 2) then begin
               if ((100 * self_cur_hits / self_max_hits) <= 30) then begin
                  global_temp := 1;
                  obj_heal_no_skill(self_obj)
               end
            end else if (chem_use_level(self_obj) == 3) then begin
               if ((100 * self_cur_hits / self_max_hits) <= 50) then begin
                  global_temp := 1;
                  obj_heal_no_skill(self_obj)
               end
            end else if (chem_use_level(self_obj) == 4) then begin
               if ((100 * self_cur_hits / self_max_hits) <= 50) then begin
                  global_temp := 1;
                  obj_heal_no_skill(self_obj)
               end
            end
         end
      end
   end
   
   //added by killap - needed for "hacky fix" for kitty drug... :(
   if (waiting == 1) then begin
      waiting := 0;
   end
   //end added  
   
end

//added by killap - expansion
procedure use_obj_on_p_proc begin
   if ( (obj_pid(obj_being_used_with) == PID_MICRO_FUSION_CELL) or (obj_pid(obj_being_used_with) == PID_SMALL_ENERGY_CELL) ) then begin
      script_overrides;
      display_msg(g_mstr(20000));
   end

   if ( (obj_pid(obj_being_used_with) == PID_GAMMA_GULP_BEER) or (obj_pid(obj_being_used_with) == PID_ROENTGEN_RUM) or (obj_pid(obj_being_used_with) == PID_ROT_GUT) ) then begin 
      if (local_var(LVAR_Time_To_Glow) == 0) then begin
         set_local_var(LVAR_Time_To_Glow,1);
         float_msg(self_obj, mstr(5100),FLOAT_COLOR_SICK);
      end
   end

   if ((obj_pid(obj_being_used_with) == PID_RADAWAY) and (local_var(LVAR_Time_To_Glow) == 2)) then begin
      obj_set_light_level(self_obj,0,0);
      set_local_var(LVAR_Time_To_Glow,0);
      float_msg(self_obj, mstr(5101),FLOAT_COLOR_NORMAL);
   end
end
//end added

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */
   
   //added by killap
   if ((cur_map_index == MAP_NEW_RENO_1) and (self_obj == party_member_obj(PID_LENNY)) and (map_var(MVAR_Kitty_Drug) == party_member_obj(PID_LENNY))) then begin 
      set_map_var(MVAR_Kitty_Drug, 0);
      waiting := 1;
      if (get_critter_stat(self_obj, STAT_st) < 10) then begin
         use_obj_on_obj(create_object_sid(PID_KITTY_SEX_DRUG_STRENGTH, 0, 0, -1), self_obj);
      end
   end 
   //end added
   
   //added by killap - expansion
   if (local_var(LVAR_Time_To_Glow) == 1) then begin
      obj_set_light_level(self_obj,100,3);
      set_local_var(LVAR_Time_To_Glow,2);
   end
   //end added
   
   if ( ((local_var(LVAR_Hostile) == 2) or
         ( (cur_town == AREA_GECKO) and (global_var(GVAR_ENEMY_GECKO)) ) or //edit by killap - added ( (cur_town == AREA_GECKO) and (global_var(GVAR_ENEMY_GECKO)) )
         (local_var(LVAR_Personal_Enemy) == 1)) and
         (obj_can_see_obj(self_obj,dude_obj))) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end
   else if (Lenny_In_Party) then begin
   debug_msg("Lenny_In_Party == "+Lenny_In_Party+". local_var(LVAR_never_again) == "+local_var(LVAR_never_again));
      if (global_var(GVAR_PLAYER_REPUTATION) < LENNY_BAD_KARMA) then begin
         call Node070;
         debug_msg("LENNY: Bad Karma");
      end
      else if ( (has_rep_childkiller) and (not(has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality))) ) then begin //edit by killap - added (not(has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)))
         call Node071;
         debug_msg("LENNY: Childkiller");
      end
      //else if (has_rep_berserker) then begin
      //   call Node072;
      //   debug_msg("LENNY: Berserker");
      //end
      else if (has_rep_slaver) then begin
         call Node073;
         debug_msg("LENNY: Slaver");
      end
      else if ( (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_DESTROYED) or
                (global_var(GVAR_GECKO_MELTDOWN) > 0) or
                (global_var(GVAR_PLANT_SCHEDULED_FOR_CHANGE) == SCHEDULED_FOR_DESTRUCTION)) then begin
         //Lenny is mad that you destroyed the power plant
         call Node074;
         debug_msg("LENNY: Destroyed Plant");
      end
      else if (dude_charisma <= 1) then begin
         call Node075;
         debug_msg("LENNY: Player Ugly");
      end
      else if ((cur_town == AREA_GECKO) and (REP_ENEMY_GECKO)) then begin
         call Node076;
         debug_msg("LENNY: Causing trouble in Gecko");
      end
      else if (party_is_waiting == false) then begin
         if (waiting != 1) then begin //check added by killap - needed for "hacky fix" for kitty drug... :(
            party_member_follow_dude
         end
      end
   end
   else if ((cur_town == AREA_GECKO) and (REP_ENEMY_GECKO)) then begin
       call Node998;
   end
   debug_msg("Gecko Standing: " + global_var(GVAR_ENEMY_GECKO));

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_self_abandon_party;
       set_local_var(LVAR_Hostile,2);
       if (cur_map_index == MAP_GECKO_SETTLEMENT) then
          set_global_var(GVAR_ENEMY_GECKO,1);
       if (cur_map_index == MAP_GECKO_JUNKYARD) then
          set_global_var(GVAR_ENEMY_GECKO,1);
       if (cur_map_index == MAP_GECKO_POWER_PLANT) then
          set_global_var(GVAR_ENEMY_GECKO,1);
       if (cur_map_index == MAP_GECKO_ACCESS_TUNNELS) then
          set_global_var(GVAR_ENEMY_GECKO,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

procedure push_p_proc begin
   k:=2300+random(0,7);
   float_msg(self_obj, message_str(NAME,k),FLOAT_COLOR_NORMAL); //edit by killap
   //floater(k);
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin

   visit_04_before:=0; //according to Matts doc these need to be
   visit_14_before:=0; //reset aat the beginning of each conversation

   GetReaction;

   call checkarea;

   if (local_var(LVAR_Personal_Enemy) == 1) then begin
       call Node998;
   end
//   else if (leaving PC's party) then begin
//   end
//   else if (learning attempt) then begin
//   end
   else if (local_var(LVAR_Herebefore) == 0) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node001;
       gSay_End;
       end_dialogue;
   end
   else if (local_var(LVAR_never_again) > 0) then begin
      floater(3005);
   end
/*
   else if ( (Lenny_In_Party) and (global_var(GVAR_PLAYER_REPUTATION) < LENNY_BAD_KARMA) ) then begin
      call Node070;
      debug_msg("LENNY: Bad Karma");
   end
   else if ( (Lenny_In_Party) and (has_rep_childkiller) ) then begin
      call Node071;
      debug_msg("LENNY: Childkiller");
   end
   //else if (has_rep_berserker) then begin
   //   call Node072;
   //   debug_msg("LENNY: Berserker");
   //end
   else if ( (Lenny_In_Party) and (has_rep_slaver) ) then begin
      call Node073;
      debug_msg("LENNY: Slaver");
   end
   else if ( (Lenny_In_Party) and
             ( (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_DESTROYED) or
             (global_var(GVAR_GECKO_MELTDOWN) > 0) or
             (global_var(GVAR_PLANT_SCHEDULED_FOR_CHANGE) == SCHEDULED_FOR_DESTRUCTION)) ) then begin
      //Lenny is mad that you destroyed the power plant
      call Node074;
      debug_msg("LENNY: Destroyed Plant");
   end
*/
   else if ((Lenny_In_Party) or (party_is_waiting)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node1000;
      gSay_End;
      end_dialogue;
   end
   else if ((get_critter_stat(dude_obj,STAT_iq) <= 3)) then begin
      call Node003;
   end
   else begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node001;
       gSay_End;
       end_dialogue;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin
   inc_good_critter
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_second_look) == 0) then begin
      set_local_var(LVAR_second_look,1);
      display_msg(mstr(100));
   end
   else begin
      display_msg(mstr(101));
   end
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

procedure checkarea begin
   here:=tile_num(self_obj);
   area:=UNKNOWN;
   if (tile_distance(here,17926) < 5) then area:=HOUSE;//these distances should be small
   else if (tile_distance(here,18100) < 4) then area:=SHOP;//so the duntons wont block doorways
end

procedure Node901 begin
end

procedure Node910 begin
   if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_REPAIRED) then
      call Node008;
   else
      call Node007;
end

/* left code here as example of skill roll
procedure Node920 begin
   if (is_success(roll_vs_skill(dude_obj,SKILL_CONVERSANT,0))) then
      call Node019;
   else
      call Node020;
end
*/

procedure HealPlayer begin
   Heal_Cost:=30;
   critter_heal(dude_obj,dude_max_hits-dude_cur_hits);
   if dude_is_crippled then begin
      Heal_Cost:=60;
      critter_uninjure(dude_obj, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
   end
   gfade_out(600);
      game_time_advance(game_ticks(8*ONE_GAME_HOUR));//Heal Injure or mult npcs
   gfade_in(600);
end

procedure PayDude begin
   k:=item_caps_total( dude_obj );
   if( k >= Heal_Cost ) then begin
      // Heal the player.
      item_caps_adjust(dude_obj, -Heal_Cost);
      if (prev_node == 922) then begin
         //do nothing
      end else begin
         call Node001; //added by killap
      end
   end
   else begin
      item_caps_adjust(dude_obj, -k); //heal him anyway but take all money
      call Node024; //added by killap
   end
end

procedure HowMany begin
//count how many are injured
   k:=0;
   if (Vic_In_Party) then begin
      if (Is_Injured(Vic_Ptr) or Is_Crippled(Vic_Ptr)) then
         k:=k+1;
   end
   if (Myron_In_Party) then begin
      if (Is_Injured(Myron_Ptr) or Is_Crippled(Myron_Ptr)) then
         k:=k+1;
   end
   if (Marcus_In_Party) then begin
      if (Is_Injured(Marcus_Ptr) or Is_Crippled(Marcus_Ptr)) then
         k:=k+1;
   end
   if (MacRae_In_Party) then begin
      if (Is_Injured(MacRae_Ptr) or Is_Crippled(MacRae_Ptr)) then
         k:=k+1;
   end
   if (Sulik_In_Party) then begin
      if (Is_Injured(Sulik_Ptr) or Is_Crippled(Sulik_Ptr)) then
         k:=k+1;
   end
   if (Lenny_In_Party) then begin
      if (Is_Injured(Lenny_Ptr) or Is_Crippled(Lenny_Ptr)) then
         k:=k+1;
   end
   if (Cyberdog_In_Party) then begin
      if (Is_Injured(Cyberdog_Ptr) or Is_Crippled(Cyberdog_Ptr)) then
         k:=k+1;
   end
   if (Doc_In_Party) then begin
      if (Is_Injured(Doc_Ptr) or Is_Crippled(Doc_Ptr)) then
         k:=k+1;
   end
   if (Goris_In_Party) then begin
      if (Is_Injured(Goris_Ptr) or Is_Crippled(Goris_Ptr)) then
         k:=k+1;
   end
   if (Davin_In_Party) then begin
      if (Is_Injured(Davin_Ptr) or Is_Crippled(Davin_Ptr)) then
         k:=k+1;
   end
   if (Miria_In_Party) then begin
      if (Is_Injured(Miria_Ptr) or Is_Crippled(Miria_Ptr)) then
         k:=k+1;
   end
   if (Robobrain_In_Party) then begin
      if (Is_Injured(Robobrain_Ptr) or Is_Crippled(Robobrain_Ptr)) then
         k:=k+1;
   end
   if (Dogmeat_In_Party) then begin
      if (Is_Injured(Dogmeat_Ptr) or Is_Crippled(Dogmeat_Ptr)) then
         k:=k+1;
   end
   if (K9_In_Party) then begin
      if (Is_Injured(K9_Ptr) or Is_Crippled(K9_Ptr)) then
         k:=k+1;
   end
   //added by killap - RP
   if (Kitsune_In_Party) then begin
      if (Is_Injured(Kitsune_Ptr) or Is_Crippled(Kitsune_Ptr)) then
         k:=k+1;
   end
   if (Dex_In_Party) then begin
      if (Is_Injured(Dex_Ptr) or Is_Crippled(Dex_Ptr)) then
         k:=k+1;
   end
   if (Cat_Jules_In_Party) then begin
      if (Is_Injured(Cat_Jules_Ptr) or Is_Crippled(Cat_Jules_Ptr)) then
         k:=k+1;
   end
   //end added
end

//added by killap
procedure timed_event_p_proc begin
   if (fixed_param == 900) then begin
      if (self_visible) then begin
         if (Lenny_In_Party) then begin
            if (Is_Crippled(self_obj)) then
               floater(5000);
            else if (get_critter_stat(self_obj, STAT_current_rad)) then 
               floater(5001);
            else if (get_poison(self_obj)) then
               floater(5002);
         end
      end
   end
end
//end added

procedure PartyFree begin
   k:=0;
   Heal_Cost:=30;
   if ((dude_max_hits > dude_cur_hits) or dude_is_crippled) then begin
      k:=k+1;
      critter_heal(dude_obj,dude_max_hits-dude_cur_hits);
      critter_uninjure(dude_obj, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
   end

   if (Vic_In_Party) then begin
      if (Is_Injured(Vic_Ptr) or Is_Crippled(Vic_Ptr)) then begin
         k:=k+1;
         critter_heal(Vic_Ptr,Injured_How_Much(Vic_Ptr));
         critter_uninjure(Vic_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Myron_In_Party) then begin
      if (Is_Injured(Myron_Ptr) or Is_Crippled(Myron_Ptr)) then begin
         k:=k+1;
         critter_heal(Myron_Ptr,Injured_How_Much(Myron_Ptr));
         critter_uninjure(Myron_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Marcus_In_Party) then begin
      if (Is_Injured(Marcus_Ptr) or Is_Crippled(Marcus_Ptr)) then begin
         k:=k+1;
         critter_heal(Marcus_Ptr,Injured_How_Much(Marcus_Ptr));
         critter_uninjure(Marcus_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (MacRae_In_Party) then begin
      if (Is_Injured(MacRae_Ptr) or Is_Crippled(MacRae_Ptr)) then begin
         k:=k+1;
         critter_heal(MacRae_Ptr,Injured_How_Much(MacRae_Ptr));
         critter_uninjure(MacRae_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Sulik_In_Party) then begin
      if (Is_Injured(Sulik_Ptr) or Is_Crippled(Sulik_Ptr)) then begin
         k:=k+1;
         critter_heal(Sulik_Ptr,Injured_How_Much(Sulik_Ptr));
         critter_uninjure(Sulik_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Lenny_In_Party) then begin
      if (Is_Injured(Lenny_Ptr) or Is_Crippled(Lenny_Ptr)) then begin
         k:=k+1;
         critter_heal(Lenny_Ptr,Injured_How_Much(Lenny_Ptr));
         critter_uninjure(Lenny_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Cyberdog_In_Party) then begin
      if (Is_Injured(Cyberdog_Ptr) or Is_Crippled(Cyberdog_Ptr)) then begin
         k:=k+1;
         critter_heal(Cyberdog_Ptr,Injured_How_Much(Cyberdog_Ptr));
         critter_uninjure(Cyberdog_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Doc_In_Party) then begin
      if (Is_Injured(Doc_Ptr) or Is_Crippled(Doc_Ptr)) then begin
         k:=k+1;
         critter_heal(Doc_Ptr,Injured_How_Much(Doc_Ptr));
         critter_uninjure(Doc_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Goris_In_Party) then begin
      if (Is_Injured(Goris_Ptr) or Is_Crippled(Goris_Ptr)) then begin
         k:=k+1;
         critter_heal(Goris_Ptr,Injured_How_Much(Goris_Ptr));
         critter_uninjure(Goris_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Davin_In_Party) then begin
      if (Is_Injured(Davin_Ptr) or Is_Crippled(Davin_Ptr)) then begin
         k:=k+1;
         critter_heal(Davin_Ptr,Injured_How_Much(Davin_Ptr));
         critter_uninjure(Davin_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Miria_In_Party) then begin
      if (Is_Injured(Miria_Ptr) or Is_Crippled(Miria_Ptr)) then begin
         k:=k+1;
         critter_heal(Miria_Ptr,Injured_How_Much(Miria_Ptr));
         critter_uninjure(Miria_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Robobrain_In_Party) then begin
      if (Is_Injured(Robobrain_Ptr) or Is_Crippled(Robobrain_Ptr)) then begin
         k:=k+1;
         critter_heal(Robobrain_Ptr,Injured_How_Much(Robobrain_Ptr));
         critter_uninjure(Robobrain_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Dogmeat_In_Party) then begin
      if (Is_Injured(Dogmeat_Ptr) or Is_Crippled(Dogmeat_Ptr)) then begin
         k:=k+1;
         critter_heal(Dogmeat_Ptr,Injured_How_Much(Dogmeat_Ptr));
         critter_uninjure(Dogmeat_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (K9_In_Party) then begin
      if (Is_Injured(K9_Ptr) or Is_Crippled(K9_Ptr)) then begin
         k:=k+1;
         critter_heal(K9_Ptr,Injured_How_Much(K9_Ptr));
         critter_uninjure(K9_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   //added by killap - RP
   if (Kitsune_In_Party) then begin
      if (Is_Injured(Kitsune_Ptr) or Is_Crippled(Kitsune_Ptr)) then begin
         k:=k+1;
         critter_heal(Kitsune_Ptr,Injured_How_Much(Kitsune_Ptr));
         critter_uninjure(Kitsune_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Dex_In_Party) then begin
      if (Is_Injured(Dex_Ptr) or Is_Crippled(Dex_Ptr)) then begin
         k:=k+1;
         critter_heal(Dex_Ptr,Injured_How_Much(Dex_Ptr));
         critter_uninjure(Dex_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   if (Cat_Jules_In_Party) then begin
      if (Is_Injured(Cat_Jules_Ptr) or Is_Crippled(Cat_Jules_Ptr)) then begin
         k:=k+1;
         critter_heal(Cat_Jules_Ptr,Injured_How_Much(Cat_Jules_Ptr));
         critter_uninjure(Cat_Jules_Ptr, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
      end
   end
   //end added
   
   if (k > 1) then
      Heal_Cost:=60;
   gfade_out(600);
      game_time_advance(game_ticks(8*ONE_GAME_HOUR));//Heal Injure or mult npcs
   gfade_in(600);
end

procedure Node920 begin
//heal, $30, if descendant known then healing free, else goto 1
   call HealPlayer;
   if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then begin
      call PayDude;
      //call Node001; --comment out by killap
   end
end

procedure Node922 begin
//heal, $30, if descendant known then healing free, else end
   call HealPlayer;
   if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then begin
      call PayDude;
   end
   
   prev_node := 922;
end

procedure Node924 begin
//heal, (30 or 60) if descendant known then healing free, else goto 1
   call PartyFree;
   if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then begin
      call PayDude;
      //call Node001; //comment out by killap
   end
end

procedure Node926 begin
//heal, (30 or 60) if descendant known then healing free, else end
   call PartyFree;
   if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then begin
      call PayDude;
   end
end

procedure Node929 begin
end

procedure Node930 begin
end

procedure Node931 begin
end

procedure Node932 begin
end

procedure Node933 begin
end

procedure Node934 begin
end

procedure Node935 begin
end

procedure Node936 begin
end

procedure Node937 begin
end

procedure Node938 begin
end

procedure Node939 begin
end

procedure Node940 begin
end

procedure Node951 begin
//   call Node021;
   if ( (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) or ( (check_general_rep > 0) and (local_var(LVAR_reaction) > 30) ) ) then begin //edit by killap - ((has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)))
      call Node021;
   end
   else begin
      call Node022;
   end
end

procedure Node953 begin
   set_self_abandon_party;
end

procedure Node954 begin
end

procedure Node960 begin
end

procedure Node961 begin
end

procedure Node962 begin
end

procedure Node963 begin
end

procedure Node964 begin
end

procedure Node965 begin
end

procedure Node966 begin
end

procedure Node995 begin
   if (get_critter_stat(dude_obj,STAT_ch) >= 7) then begin
       TopReact;
   end
   else begin
       BottomReact;
   end
end

procedure Node996 begin
   BottomReact;
end

procedure Node997 begin
   if (get_critter_stat(dude_obj,STAT_ch) >= 8) then
       call Node004;
   else
       call Node005;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE
procedure Node1a begin
   UpReactMinor;
   call Node001;
end

procedure Node001 begin
//need first time
   if (local_var(LVAR_Herebefore) == 0) then begin
      set_local_var(LVAR_Herebefore, 1);
      if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then
         Reply(110);
      else
         Reply(112);
   end
   else begin
      if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then
         Reply(111);
      else
         Reply(113);
   end
   NLowOption(114,Node002);
   NOption(115,Node005,004);
   if (local_var(LVAR_Know_Doctor)) then //added check by killap
      NOption(122,Node02a,004);
   if (dude_found_geck) then begin
      //do nothing
   end
   else begin
      NOption(119,Node004,004);
   end
   if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) > 0) then
      NOption(120,Node008,004);
   NOption(121,Node999,004);
end

procedure Node02a begin
   call HowMany;
   //display_msg("k = "+k);

   Reply(125);
   if ( (Is_Injured(dude_obj)) or ( dude_is_crippled ) ) then //added ( dude_is_crippled ) - killap
      NOption(116,Node006,004);
   If (k > 0) then begin
      NOption(117,Node007,004);
      //NOption(118,Node007,004);
   end
   NOption(126,Node999,004);
end

procedure Node002 begin
//only for first time
   Reply(130);
   NOption(131,Node999,001);
end

procedure Node003 begin
      floater(random(140,142));
end

procedure Node004 begin
   call HowMany;
   Reply(150);
   if ( (Is_Injured(dude_obj)) or ( dude_is_crippled ) ) then
      NOption(151,Node006,004);
   if (k > 0) then
      NOption(152,Node007,004);
   NOption(153,Node04a,004);
   NOption(154,Node999,004);
end

procedure Node04a begin
   set_local_var(LVAR_GECKO_DESCENDANT_KNOWN,1);
   call Node008;
end

procedure Node005 begin
    //added by killap
   if (local_var(LVAR_Know_Doctor) != 1) then
      set_local_var(LVAR_Know_Doctor,1);
   //end added
   call HowMany;
   Reply(160);
   NOption(161,Node023,004);
   NOption(162,Node001,004);
   NOption(163,Node009,004);
   if ( (Is_Injured(dude_obj)) or ( dude_is_crippled ) ) then // added ( dude_is_crippled ) - killap
      NOption(164,Node006,004);
   //If_Party_Has_Injured then
   if (k > 0) then
     NOption(165,Node007,004);
   NOption(166,Node999,004);
end

procedure Node006 begin
from6:=1;
//Need a conditional for these replies
   if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then begin
      Reply(174);
   end
   else begin
      Reply(170);
      NOption(171,Node015,004);
   end

   //Reply(174);
   NOption(172,Node920,004);
   NOption(173,Node922,004);
   NOption(175,Node999,004);
end

procedure Node007 begin
from6:=0;

   call HowMany;

   if (k == 0) then begin
      NMessage(187);
    //say your f'friend looks ok to me
   end
   else begin
      if (local_var(LVAR_GECKO_DESCENDANT_KNOWN) == 0) then begin
         if (k < 2) then
            Reply(185);
         else
            Reply(186);
      end
      else begin
         if (k < 2) then
            Reply(180);
         else
            Reply(181);
         NOption(182,Node015,004);
      end
/*

   if (visit_04_before) then
      Reply(141);
   else begin
      visit_04_before:=1;
      Reply(140);
   end
*/
      NOption(183,Node924,004);
      NOption(184,Node926,004);
      NOption(175,Node999,004);
   end
end

procedure Node008 begin
   Reply(190);
   GOption(191,Node16a,004);
   NOption(192,Node999,004);
end

procedure Node009 begin
   Reply(200);
   GOption(201,Node10a,004);
   NOption(202,Node999,004);
end

procedure Node10a begin
   UpReactTiny;
   call Node010;
end

procedure Node010 begin
   Reply(210);
   NOption(211,Node11a,004);
   NOption(212,Node999,004);
end

procedure Node11a begin
   UpReactTiny;
   call Node011;
end

procedure Node011 begin
   Reply(220);
   GOption(221,Node12a,004);
   NOption(222,Node999,004);
end

procedure Node12a begin
   UpReactMinor;
   call Node012;
end

procedure Node012 begin
   Reply(230);
   GOption(231,Node13a,004);
   NOption(232,Node999,004);
end

procedure Node13a begin
   UpReactMinor;
   call Node013;
end

procedure Node013 begin
   Reply(240);
   GOption(241,Node14a,004);
   NOption(242,Node999,004);
end

procedure Node14a begin
   UpReactMinor;
   call Node014;
end

procedure Node014 begin
   Reply(250);
   GOption(251,Node1a,004); //minor,goto01
   NOption(252,Node999,004);
end

procedure Node015 begin
   Reply(260);
//need conditionals on these
   if (from6) then
      NOption(261,Node006,004);
   else
      NOption(261,Node007,004);
end

procedure Node16a begin
   UpReactTiny;
   call Node016;
end

procedure Node016 begin
   Reply(270);
   NOption(271,Node17a,004); //tiny,goto17
   NOption(272,Node999,004);
end

procedure Node17a begin
   UpReactTiny;
   call Node017;
end

procedure Node017 begin
   Reply(280);
   GOption(281,Node18a,004); //tiny,goto18
   BOption(282,Node999,004);
   NOption(283,Node999,004);
end

procedure Node18a begin
   UpReactTiny;
   call Node018;
end

procedure Node018 begin
   Reply(290);
   GOption(291,Node019,004); //minor,goto19
   NOption(292,Node999,004);
end

procedure Node19a begin
   UpReactMinor;
   call Node019;
end

procedure Node019 begin
   Reply(300);
   GOption(301,Node20a,004); //minor,goto20
   NOption(302,Node999,004);
end

procedure Node20a begin
   UpReactMinor;
   call Node020;
end

procedure Node020 begin
   Reply(310);
//add conditional NEED TO CHECK IF ROOM TO JOIN
   if dude_has_free_slot_for_lenny then
      GOption(311,Node951,004);
   NOption(312,Node001,004); //was BOption - killap
   BOption(313,Node999,004); //was NOption - killap
   NOption(314,Node999,004);
end

procedure Node021 begin
   if (dude_charisma <= 1) then begin
      NMessage(330);
   end
   else begin
      Reply(320);
      GOption(321,Node800,004);
      BOption(322,Node001,004);
   end
end

procedure Node022 begin
   Reply(330);
//   if (broken_hills_visible_on_map == false) then
//      NOption(221,Node013,004);
   NOption(333,Node999,004);
   BOption(334,Node999,004); //moderate,end
end

procedure Node023 begin
   Reply(340);
   NOption(341,Node005,004);
   NOption(342,Node999,004);
end

procedure Node024 begin
   Reply(350);
   NOption(351,Node001,004);
   NOption(352,Node999,004);
end

//put these in party interaction/critter proc
procedure Node025 begin
   Reply(360);
//add other replies and conditionals
   NOption(372,Node953,001); //all of these..Lenny leaves party end
   BOption(373,Node953,001); //       "
   BOption(374,Node953,001); //       "
   NOption(375,Node953,001); //       "
end

/*
procedure Node030 begin
   Reply(380);
   NOption(381,Node001,001); //move lenny out of pc's way
   NOption(382,Node031,001);
   NOption(383,Node035,001);
   NOption(384,Node038,001);
   NOption(385,Node038,001);
   NOption(386,Node038,001);
   NOption(387,Node038,001);
   NOption(388,Node954,001); //list current hp total hp and any statuses.
   NOption(389,Node999,001);
end

procedure Node031 begin
   Reply(400);
   NOption(401,Node032,001);
   NOption(402,Node036,001);
   NOption(403,Node037,001);
   NOption(404,Node033,001);
   NOption(405,Node030,001);
end

procedure Node032 begin
   Reply(410);
   NOption(411,Node040,001);
   NOption(412,Node041,001);
   NOption(413,Node042,001);
   NOption(414,Node039,001);
   NOption(415,Node030,001);
end

procedure Node033 begin
   Reply(420);
   NOption(421,Node043,001);
   NOption(422,Node044,001);
   NOption(423,Node045,001);
   NOption(424,Node030,001);
end

procedure Node034 begin
//need conditional replies
   Reply(430);
   NOption(432,Node999,001);
end

procedure Node035 begin
   Reply(440);
   NOption(441,Node030,001); //have lenny wait here
   NOption(442,Node030,001); //have lenny wait here
   NOption(443,Node030,001);
end

procedure Node036 begin
   Reply(450);
   NOption(451,Node999,001); //change readied weapon to best,end
   NOption(452,Node030,001); //change readied weapon to best,goto30
   NOption(453,Node030,001);
end

procedure Node037 begin
   Reply(460);
   NOption(461,Node999,001); //change worn armor to best,end
   NOption(462,Node030,001); //change worn armor to best,goto30
   NOption(463,Node030,001); //goto30
end

procedure Node038 begin
//need conditional replies
   Reply(470);
   NOption(473,Node960,001);
   NOption(474,Node961,001);
   NOption(475,Node962,001);
   NOption(476,Node963,001);
   NOption(477,Node964,001);
   NOption(478,Node966,001);
   NOption(479,Node030,001);
end

procedure Node039 begin
   Reply(480);
   NOption(481,Node030,001);
end

procedure Node040 begin
   Reply(490);
   NOption(491,Node999,001); //move lenny to short dist,end
   NOption(492,Node030,001); //move lenny to short dist,goto30
   NOption(493,Node030,001);
end

procedure Node041 begin
   Reply(500);
   NOption(501,Node999,001); //move lenny to med dist,end
   NOption(502,Node030,001); //move lenny to med dist,goto30
   NOption(503,Node030,001);
end

procedure Node042 begin
   Reply(510);
   NOption(511,Node999,001); //move lenny to long dist,end
   NOption(512,Node030,001); //move lenny to long dist,goto30
   NOption(513,Node030,001);
end

procedure Node043 begin
   Reply(520);
   NOption(521,Node999,001); //change aggressiveness level to defense,end
   NOption(522,Node030,001); //change aggressiveness level to defense,goto30
   NOption(523,Node030,001); //goto30
end

procedure Node044 begin
   Reply(530);
   NOption(531,Node999,001); //change aggressiveness level to normal,end
   NOption(532,Node030,001); //change aggressiveness level to normal,goto30
   NOption(533,Node030,001); //goto30
end

procedure Node045 begin
   Reply(540);
   NOption(541,Node030,001);
end
*/

procedure Node070 begin
   //BAD KARMA
   //set_local_var(LVAR_never_again,1);
   if (self_visible) then
      floater(3000);
   set_self_abandon_party;
   //party_remove(self_obj);
   //leave party
end

procedure Node071 begin
   //CHILDKILLER
   set_local_var(LVAR_never_again,1); //means this npc wont talk to player after this
   //floater(3001);
   if (self_visible) then
      floater(370);
   set_self_abandon_party;
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_GECKO);
   //party_remove(self_obj);
   //leave party
end

procedure Node072 begin
   //BERSERKER
   //set_local_var(LVAR_never_again,1);
   if (self_visible) then
      floater(3002);
   set_self_abandon_party;
   //party_remove(self_obj);
   //leave party
end

procedure Node073 begin
   //SLAVER
   //set_local_var(LVAR_never_again,1);
   //floater(3003);
   if (self_visible) then
      floater(370);
   set_self_abandon_party;
   //party_remove(self_obj);
   //leave party
end

procedure Node074 begin
   //DESTROYED POWER PLANT
   set_local_var(LVAR_never_again,1); //means this npc wont talk to player after this
   set_local_var(LVAR_Personal_Enemy,1); //means wont ever forgive for this offense
   //floater(3004);
   if (self_visible) then
      floater(370);
   set_self_abandon_party;
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_GECKO);
   //party_remove(self_obj);
   //leave party
end

procedure Node075 begin
   if (self_visible) then
      floater(371);
   set_self_abandon_party;
end

procedure Node076 begin
   set_local_var(LVAR_never_again,1); //means this npc wont talk to player after this
   if (self_visible) then
      floater(370);
   set_self_abandon_party;
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_GECKO);
end

// RP content - killap
procedure Node077 begin
   Reply(6010);
   if (MacRae_In_Party) then
      NOption(6011,Node079,004);
   if (get_westin_flag(WESTIN_DRUGS_KNOWN)) then
      NOption(6012,Node078,004);
   NOption(6013,Node079,004);
end

procedure Node078 begin
   Reply(6020);
   NOption((g_mstr(352)),Node079,004);
end

procedure Node079 begin
   Reply(6021);
   NOption(6022,Node081,004);
   if (has_skill(dude_obj,SKILL_DOCTOR) >= 40) then
      NOption(6023,Node081,004);
end

procedure Node080 begin
   Reply(6030);
   NOption((g_mstr(352)),Node081,004);
end

procedure Node081 begin
   set_local_var(LVAR_Heart_Health_Talk,1);
   Reply(6040);
   NOption(6041,Node1000,004);
   if (get_westin_flag(WESTIN_DRUGS_KNOWN)) then
      NOption(6042,Node083,004);
   if (MacRae_In_Party) then
      NOption(6043,Node082,004);
end

procedure Node082 begin
   Reply(6050);
   NOption(6051,Node083,004);
   NOption(6052,Node083,004);
end

procedure Node083 begin
   Reply(6060);
   NOption(6061,Node084,004);
end

procedure Node084 begin
   Reply(6070);
   NOption(6071,Node085,004);
   NOption(6072,Node086,004);
end

procedure Node085 begin
   Reply(6080+dude_is_female);
   NOption((g_mstr(352)),Node086,004);
end

procedure Node086 begin
   set_westin_flag(WESTIN_LENNY_TALKED);
   Reply(6082);
   NOption(6083,Node087,004);
   NOption(6084,Node999,004);
end

procedure Node087 begin
   Reply(6090);
   NOption(6091,Node1000,004);
   NOption(6092,Node999,004);
end
//end RP content

procedure Node800 begin
   if (local_var(LVAR_lenny_rep) == 0) then begin
      set_local_var(LVAR_lenny_rep,1);
      inc_general_rep(REP_BONUS_GC_LENNY_JOINS);
      GC_REP_ADJUST(10)
   end
   lenny_joins_party;
   call Node1000; // added by killap
end

// party stuff
procedure Node1000 begin
   Reply(1000);
   lenny_party_member_options;

   if ((get_westin_flag(WESTIN_DRUGS_KNOWN) or (MacRae_In_Party)) and local_var(LVAR_Heart_Health_Talk) == 0) then
      NOption(6000,Node077,004);
   if ((obj_is_carrying_obj_pid(dude_obj,PID_HEART_PILLS)) and not(get_westin_flag(WESTIN_LENNY_TALKED))) then
      NOption(6001,Node081,004);   

end

procedure Node1001 begin
   // heal yourself
   obj_heal(self_obj)
   global_temp := 0;
   if (party_healed_max) then begin
      Reply(1100);
   end else if (party_healed_good) then begin
      Reply(1200);
   end else if (party_healed_hurt) then begin
      Reply(1300);
   end else begin
      Reply(1400);
   end

   if ((get_westin_flag(WESTIN_DRUGS_KNOWN) or (MacRae_In_Party)) and local_var(LVAR_Heart_Health_Talk) == 0) then
      NOption(6000,Node077,004);
   if ((obj_is_carrying_obj_pid(dude_obj,PID_HEART_PILLS)) and not(get_westin_flag(WESTIN_LENNY_TALKED))) then
      NOption(6001,Node081,004);

   lenny_party_member_options;
end
procedure Node1002 begin
   // wait here
   set_party_waiting;
   Reply(1500);
   lenny_party_member_options;
end
procedure Node1003 begin
   // put your weapon away
   inven_unwield(self_obj);
   Reply(1600);
   lenny_party_member_options;
end
procedure Node1004 begin
   // follow close
   set_follow_close;
   Reply(1700);
   lenny_party_member_options;
end
procedure Node1005 begin
   // follow medium
   set_follow_medium;
   Reply(1800);
   lenny_party_member_options;
end
procedure Node1006 begin
   // follow far
   set_follow_far;
   Reply(1900);
   lenny_party_member_options;
end
procedure Node1007 begin
   // distance
   //Reply("TEMP MESSAGE: DISTANCE");
   Reply(4000);
   party_member_def_follow_options;
end
procedure Node1008 begin
   // gear
   //Reply("TEMP MESSAGE: GEAR");
   Reply(4001);
   party_member_def_gear_options;
end
procedure Node1009 begin
   // remove armor
   remove_armor(self_obj)
   //Reply("TEMP MESSAGE: REMOVE ARMOR");
   Reply(4003);
   lenny_party_member_options;
end
procedure Node1010 begin
   // weapons that can be used
   //Reply("TEMP MESSAGE: CAN USE...");
   Reply(4002);
   lenny_party_member_options;
end
procedure Node1100 begin
   // join me
   if (dude_charisma <= 1) then begin
      set_self_abandon_party;
      Reply(371);
      NOption(g_mstr(10007),Node999,001);
   end else if (dude_at_max_party_size) then begin
      set_self_abandon_party;
      Reply(2000);
      //Reply(360);
      NOption(g_mstr(10007),Node999,001);
   end else if (town_rep_is_hated) then begin
      set_self_abandon_party;
      Reply(2100);
      //Reply(370);
      NOption(g_mstr(10007),Node999,001);
   end else begin
      end_party_waiting;
      Reply(2200);
      lenny_party_member_options;
   end
end



//xxxxxxxxxxxxxxxxxxxx